import React, { useState, useEffect, useRef } from 'react';
import './ChatbotWidget.css';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
}

const ChatbotWidget: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Auto scroll to bottom
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Initialize with welcome message
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const welcomeMessage: Message = {
        id: 'welcome',
        text: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa ph√≤ng kh√°m. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?',
        sender: 'bot',
        timestamp: new Date()
      };
      setMessages([welcomeMessage]);
    }
  }, [isOpen, messages.length]);

  const handleToggleChat = () => {
    setIsOpen(!isOpen);
  };

  const processMessage = async (messageText: string): Promise<string> => {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const lowerMessage = messageText.toLowerCase().trim();
    
    if (lowerMessage.includes('l·ªãch h·∫πn') || lowerMessage.includes('appointment')) {
      return 'ƒê·ªÉ ƒë·∫∑t l·ªãch h·∫πn, b·∫°n c√≥ th·ªÉ truy c·∫≠p trang "ƒê·∫∑t l·ªãch" ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i qua s·ªë ƒëi·ªán tho·∫°i h·ªó tr·ª£.';
    }
    
    if (lowerMessage.includes('d·ªãch v·ª•') || lowerMessage.includes('service')) {
      return 'Ch√∫ng t√¥i cung c·∫•p c√°c d·ªãch v·ª• t∆∞ v·∫•n s·ª©c kh·ªèe sinh s·∫£n v√† x√©t nghi·ªám STI. B·∫°n c√≥ th·ªÉ xem chi ti·∫øt t·∫°i trang "D·ªãch v·ª•".';
    }
    
    if (lowerMessage.includes('b√°c sƒ©') || lowerMessage.includes('consultant')) {
      return 'ƒê·ªôi ng≈© b√°c sƒ© c·ªßa ch√∫ng t√¥i c√≥ nhi·ªÅu nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c s·ª©c kh·ªèe sinh s·∫£n. B·∫°n c√≥ th·ªÉ xem th√¥ng tin chi ti·∫øt v·ªÅ t·ª´ng b√°c sƒ©.';
    }
    
    if (lowerMessage.includes('gi√∫p') || lowerMessage.includes('help')) {
      return `T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
‚Ä¢ ƒê·∫∑t l·ªãch h·∫πn t∆∞ v·∫•n
‚Ä¢ Xem th√¥ng tin d·ªãch v·ª•
‚Ä¢ T√¨m hi·ªÉu v·ªÅ ƒë·ªôi ng≈© b√°c sƒ©
‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng website

B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ c·ª• th·ªÉ?`;
    }
    
    return 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn l·ªãch h·∫πn, d·ªãch v·ª• v√† th√¥ng tin b√°c sƒ©. B·∫°n c√≥ c√¢u h·ªèi g√¨ c·ª• th·ªÉ kh√¥ng?';
  };

  const handleSendMessage = async (messageText?: string) => {
    const text = messageText || inputValue.trim();
    if (!text) return;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      text,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      const botResponse = await processMessage(text);
      
      // Add bot message
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      console.error('Error getting bot response:', error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: 'Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.',
        sender: 'bot',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('vi-VN', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const suggestedQuestions = [
    'T√¥i mu·ªën ƒë·∫∑t l·ªãch h·∫πn',
    'Xem th√¥ng tin d·ªãch v·ª•',
    'Th√¥ng tin b√°c sƒ© t∆∞ v·∫•n',
    'T√¥i c·∫ßn gi√∫p ƒë·ª°'
  ];

  return (
    <div className="chatbot-widget-container">
      {/* Chat Window */}
      {isOpen && (
        <div className="chatbot-window">
          {/* Header */}
          <div className="chatbot-header">
            <div className="chatbot-info">
              <div className="chatbot-avatar">
                <span>ü§ñ</span>
              </div>
              <div>
                <h4>Tr·ª£ l√Ω ·∫£o</h4>
                <span className="status online">ƒêang ho·∫°t ƒë·ªông</span>
              </div>
            </div>
            <button 
              className="close-button"
              onClick={handleToggleChat}
              aria-label="ƒê√≥ng chat"
            >
              ‚úï
            </button>
          </div>

          {/* Messages */}
          <div className="chatbot-messages">
            {messages.map((message) => (
              <div 
                key={message.id} 
                className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}
              >
                <div className="message-content">
                  <p>{message.text}</p>
                  <span className="message-time">
                    {formatTime(message.timestamp)}
                  </span>
                </div>
              </div>
            ))}

            {/* Loading indicator */}
            {isLoading && (
              <div className="message bot-message">
                <div className="message-content loading">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}

            {/* Suggested questions */}
            {messages.length <= 1 && (
              <div className="suggestions">
                <p className="suggestions-title">C√¢u h·ªèi g·ª£i √Ω:</p>
                <div className="suggestions-list">
                  {suggestedQuestions.map((suggestion, index) => (
                    <button
                      key={index}
                      className="suggestion-btn"
                      onClick={() => handleSendMessage(suggestion)}
                    >
                      {suggestion}
                    </button>
                  ))}
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="chatbot-input">
            <div className="input-container">
              <textarea
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Nh·∫≠p tin nh·∫Øn..."
                className="message-input"
                rows={1}
                disabled={isLoading}
              />
              <button
                onClick={() => handleSendMessage()}
                disabled={!inputValue.trim() || isLoading}
                className="send-button"
                aria-label="G·ª≠i tin nh·∫Øn"
              >
                <svg 
                  width="20" 
                  height="20" 
                  viewBox="0 0 24 24" 
                  fill="currentColor"
                >
                  <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
                </svg>
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Floating Button */}
      <button
        className={`chatbot-toggle ${isOpen ? 'open' : ''}`}
        onClick={handleToggleChat}
        aria-label={isOpen ? 'ƒê√≥ng chat' : 'M·ªü chat'}
      >
        {isOpen ? (
          <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
          </svg>
        ) : (
          <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
            <path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4v3c0 .6.4 1 1 1 .2 0 .5-.1.7-.3L14.4 18H20c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 12h-2v-2h2v2zm0-4h-2V6h2v4z"/>
          </svg>
        )}
        
        {/* Notification badge */}
        {!isOpen && (
          <div className="notification-badge">
            <span>!</span>
          </div>
        )}
      </button>
    </div>
  );
};

export default ChatbotWidget;
