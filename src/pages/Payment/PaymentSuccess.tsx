
import React, { useEffect, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import './PaymentSuccess.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
  faCalendarCheck,
  faHome,
  faCheckCircle,
  faUser,
  faClock,
  faPhone,
  faEnvelope,
  faMoneyBillWave
} from '@fortawesome/free-solid-svg-icons';
import { appointmentAPI } from '../../utils/api';


const PaymentSuccess: React.FC = () => {
  const navigate = useNavigate();
  const { appointmentId } = useParams();
  const [appointment, setAppointment] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    if (!appointmentId) {
      console.error('‚ùå No appointmentId provided in URL params');
      setError('Kh√¥ng c√≥ ID l·ªãch h·∫πn ƒë∆∞·ª£c cung c·∫•p.');
      setLoading(false);
      return;
    }
    
    console.log('üîç Fetching appointment with ID:', appointmentId);
    setLoading(true);
    
    appointmentAPI.getAppointmentById(appointmentId)
      .then(res => {
        console.log('üìã Appointment details fetched:', JSON.stringify(res.data, null, 2));
        
        // Log specific details about services and payment
        const appointmentData = res.data;
        if (appointmentData && appointmentData.appointmentDetails && appointmentData.appointmentDetails.length > 0) {
          console.log('üß™ Services:', appointmentData.appointmentDetails.map((d: any) => ({
            id: d.service?.serviceId,
            name: d.service?.servicesName,
            price: d.service?.price
          })));
        }
        if (appointmentData) {
          console.log('üí∞ Total amount:', appointmentData.totalAmount);
          console.log('üí≥ Payment status:', appointmentData.paymentStatus);
        }
        
        setAppointment(res.data);
        setLoading(false);
      })
      .catch((error) => {
        console.error('‚ùå Error fetching appointment details:', error);
        setError('Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªãch h·∫πn.');
        setLoading(false);
      });
  }, [appointmentId]);

  const formatDate = (dateString: string) => {
    const options: Intl.DateTimeFormatOptions = {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    };
    return new Date(dateString).toLocaleDateString('vi-VN', options);
  };

  const handleReturnHome = () => {
    navigate('/');
  };

  const getPaymentStatusText = () => {
    if (!appointment) return '';
    if (appointment.paymentStatus === 1 || appointment.paymentStatus === 2) return 'ƒê√£ thanh to√°n';
    if (appointment.paymentStatus === 0) return 'Ch∆∞a thanh to√°n';
    return 'Kh√¥ng x√°c ƒë·ªãnh';
  };



  if (loading) {
    return <div className="success-page"><div className="success-container"><p>ƒêang t·∫£i th√¥ng tin l·ªãch h·∫πn...</p></div></div>;
  }
  if (error) {
    return <div className="success-page"><div className="success-container"><p style={{color:'red'}}>{error}</p></div></div>;
  }

  return (
    <div className="success-page">
      <div className="success-container">
        <div className="success-icon">
          <FontAwesomeIcon icon={faCheckCircle} />
        </div>
        <h1 className="success-title">ƒê·∫∑t L·ªãch Th√†nh C√¥ng!</h1>
        <p className="success-message">
          C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t l·ªãch kh√°m. Th√¥ng tin chi ti·∫øt v·ªÅ l·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email c·ªßa b·∫°n.
        </p>
        <div className="appointment-details">
          <div className="appointment-card">
            <div className="appointment-header">
              <h3>Th√¥ng Tin L·ªãch H·∫πn</h3>
              <span className="appointment-id">#{appointment?.appointmentID}</span>
            </div>
            <div className="appointment-info">
              <div className="booking-info-grid">
                <div className="booking-info-item">
                  <div className="booking-info-label">
                    <FontAwesomeIcon icon={faCalendarCheck} className="info-icon" />
                    <span>D·ªãch v·ª•:</span>
                  </div>
                  <div className="booking-info-value">
                    {appointment?.appointmentDetails && appointment.appointmentDetails.length > 0 ? (
                      <div>
                        {appointment.appointmentDetails.map((detail: any, index: number) => (
                          <div key={index} style={{ 
                            marginBottom: index < appointment.appointmentDetails.length - 1 ? '8px' : '0',
                            display: 'flex', 
                            alignItems: 'center'
                          }}>
                            {detail.service?.serviceType === 1 || 
                              (detail.service?.servicesName?.toLowerCase().includes('x√©t nghi·ªám') || 
                               detail.service?.servicesName?.toLowerCase().includes('test') || 
                               detail.service?.servicesName?.toLowerCase().includes('sti')) ? (
                              <span style={{ marginRight: '5px', color: '#8b5cf6' }}>üß™</span>
                            ) : (
                              <span style={{ marginRight: '5px', color: '#3b82f6' }}>üë®‚Äç‚öïÔ∏è</span>
                            )}
                            {detail.service?.servicesName || 'Ch∆∞a x√°c ƒë·ªãnh'}
                          </div>
                        ))}
                      </div>
                    ) : (
                      'Ch∆∞a x√°c ƒë·ªãnh'
                    )}
                  </div>
                </div>
                <div className="booking-info-item">
                  <div className="booking-info-label">
                    <FontAwesomeIcon icon={faUser} className="info-icon" />
                    <span>B√°c sƒ© t∆∞ v·∫•n:</span>
                  </div>
                  <div className="booking-info-value">{appointment?.consultant?.name || 'Ch∆∞a x√°c ƒë·ªãnh'}</div>
                </div>
                <div className="booking-info-item">
                  <div className="booking-info-label">
                    <FontAwesomeIcon icon={faCalendarCheck} className="info-icon" />
                    <span>Ng√†y kh√°m:</span>
                  </div>
                  <div className="booking-info-value">{appointment?.appointmentDate ? formatDate(appointment.appointmentDate) : 'Ch∆∞a x√°c ƒë·ªãnh'}</div>
                </div>
                <div className="booking-info-item">
                  <div className="booking-info-label">
                    <FontAwesomeIcon icon={faClock} className="info-icon" />
                    <span>Gi·ªù kh√°m:</span>
                  </div>
                  <div className="booking-info-value">{
                    appointment?.slot?.startTime 
                      ? new Date(appointment.slot.startTime).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' }) +
                        ' - ' + 
                        new Date(appointment.slot.endTime).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })
                      : 'Ch∆∞a x√°c ƒë·ªãnh'
                  }</div>
                </div>
                <div className="booking-info-item">
                  <div className="booking-info-label">
                    <FontAwesomeIcon icon={faUser} className="info-icon" />
                    <span>H·ªç t√™n:</span>
                  </div>
                  <div className="booking-info-value">{appointment?.customer?.name || 'Ch∆∞a x√°c ƒë·ªãnh'}</div>
                </div>
                <div className="booking-info-item">
                  <div className="booking-info-label">
                    <FontAwesomeIcon icon={faPhone} className="info-icon" />
                    <span>S·ªë ƒëi·ªán tho·∫°i:</span>
                  </div>
                  <div className="booking-info-value">{appointment?.customer?.phone || 'Ch∆∞a x√°c ƒë·ªãnh'}</div>
                </div>
                {appointment?.customer?.email && (
                  <div className="booking-info-item">
                    <div className="booking-info-label">
                      <FontAwesomeIcon icon={faEnvelope} className="info-icon" />
                      <span>Email:</span>
                    </div>
                    <div className="booking-info-value">{appointment.customer.email}</div>
                  </div>
                )}
                <div className="booking-info-item">
                  <div className="booking-info-label">
                    <FontAwesomeIcon icon={faMoneyBillWave} className="info-icon" />
                    <span>Ph√≠ d·ªãch v·ª•:</span>
                  </div>
                  <div className="booking-info-value price" style={{ color: '#10b981', fontWeight: 'bold' }}>{appointment?.totalAmount ? appointment.totalAmount.toLocaleString('vi-VN') + ' VNƒê' : 'Ch∆∞a x√°c ƒë·ªãnh'}</div>
                </div>

                <div className="booking-info-item">
                  <div className="booking-info-label">
                    <FontAwesomeIcon icon={faMoneyBillWave} className="info-icon" />
                    <span>Tr·∫°ng th√°i thanh to√°n:</span>
                  </div>
                  <div className="booking-info-value" style={{
                    color: appointment?.paymentStatus === 1 || appointment?.paymentStatus === 2 ? 'var(--success-color)' : 'var(--accent-color)'
                  }}>
                    {getPaymentStatusText()}
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="reminder-notes">
            <h4>L∆∞u √Ω:</h4>
            <ul>
              <li>Vui l√≤ng ƒë·∫øn tr∆∞·ªõc gi·ªù h·∫πn 15 ph√∫t ƒë·ªÉ ho√†n t·∫•t th·ªß t·ª•c.</li>
              <li>Mang theo CMND/CCCD v√† th·∫ª BHYT (n·∫øu c√≥).</li>
              <li>N·∫øu c√≥ thay ƒë·ªïi l·ªãch h·∫πn, vui l√≤ng li√™n h·ªá tr∆∞·ªõc 24 gi·ªù.</li>
              <li>S·ªë ƒëi·ªán tho·∫°i h·ªó tr·ª£: <strong>1900 1234</strong></li>
            </ul>
          </div>
        </div>
        <div className="action-buttons">
          <button className="primary-button" onClick={handleReturnHome}>
            <FontAwesomeIcon icon={faHome} /> Tr·ªü v·ªÅ trang ch·ªß
          </button>
        </div>
      </div>
    </div>
  );
};

export default PaymentSuccess; 