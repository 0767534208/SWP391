import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './BlogApproval.css';
import { blogAPI } from '../../utils/api';
import api from '../../utils/api';

interface BlogDisplay {
  id: string;
  title: string;
  description: string;
  content: string;
  imageUrl: string;
  publishedDate: string;
  author: string;
  status: 'published' | 'draft';
}

const BlogApproval: React.FC = () => {
  const navigate = useNavigate();
  const [blogs, setBlogs] = useState<BlogDisplay[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [notification, setNotification] = useState<{message: string; type: 'success' | 'error'} | null>(null);
  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);
  const [pendingAction, setPendingAction] = useState<{
    type: 'approve' | 'reject',
    blog: BlogDisplay
  } | null>(null);

  // Fetch blogs on component mount
  useEffect(() => {
    fetchBlogs();
  }, []);

  // Fetch blogs from API
  const fetchBlogs = async () => {
    setIsLoading(true);
    try {
      console.log('üîÑ ƒêang t·∫£i danh s√°ch b√†i vi·∫øt...');
      const response = await blogAPI.getBlogs();
      
      // Handle different response scenarios
      if (response.statusCode === 200 && response.data) {
        console.log('‚úÖ T·∫£i danh s√°ch b√†i vi·∫øt th√†nh c√¥ng:', response);
        
        const formattedBlogs: BlogDisplay[] = Array.isArray(response.data) ? response.data.map((blog: any) => ({
          id: blog.blogID?.toString() || '',
          title: blog.title || '',
          description: blog.summary || blog.content?.substring(0, 100) || '',
          content: blog.content || '',
          imageUrl: blog.imageBlogs?.[0]?.image || blog.image || '',
          publishedDate: blog.createAt ? new Date(blog.createAt).toLocaleDateString('vi-VN', { day: 'numeric', month: 'long', year: 'numeric' }) : 'Invalid Date',
          author: blog.author || 'Unknown',
          status: blog.status ? 'published' : 'draft'
        })) : [];
        
        setBlogs(formattedBlogs);
        console.log(`üìä ƒê√£ t·∫£i ${formattedBlogs.length} b√†i vi·∫øt`);
      } else if (response.statusCode === 502) {
        // Handle server error
        console.error('‚ùå L·ªói m√°y ch·ªß:', response.message);
        setBlogs([]); // Set empty array for now
      } else {
        console.error('‚ùå Ph·∫£n h·ªìi kh√¥ng mong ƒë·ª£i:', response);
        setBlogs([]);
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i danh s√°ch b√†i vi·∫øt:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // L·ªçc blog theo tr·∫°ng th√°i v√† t·ª´ kh√≥a t√¨m ki·∫øm
  const filteredBlogs = blogs.filter(blog => 
    (statusFilter === 'all' || blog.status === statusFilter) &&
    (blog.title.toLowerCase().includes(searchQuery.toLowerCase()) || 
     blog.author.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  // Hi·ªÉn th·ªã modal x√°c nh·∫≠n tr∆∞·ªõc khi ph√™ duy·ªát
  const handleApproveClick = (blog: BlogDisplay) => {
    setPendingAction({
      type: 'approve',
      blog: blog
    });
    setIsConfirmModalOpen(true);
  };
  
  // Ph√™ duy·ªát/xu·∫•t b·∫£n blog
  const handleApproveBlog = async (blog: BlogDisplay) => {
    try {
      console.log('üîÑ ƒêang ph√™ duy·ªát v√† xu·∫•t b·∫£n b√†i vi·∫øt, ID:', blog.id);
      
      // S·ª≠ d·ª•ng updateBlog API thay v√¨ ActivateBlog ƒë·ªÉ gi·ªØ nguy√™n c√°c th√¥ng tin kh√°c
      const response = await blogAPI.updateBlog({
        id: blog.id,
        title: blog.title,
        content: blog.content,
        author: blog.author,
        isPublished: true // ƒê·∫∑t isPublished th√†nh true thay v√¨ status
      });
      
      if (response && response.statusCode === 200) {
        console.log('‚úÖ Ph√™ duy·ªát v√† xu·∫•t b·∫£n b√†i vi·∫øt th√†nh c√¥ng:', response);
        setNotification({ message: 'Ph√™ duy·ªát v√† xu·∫•t b·∫£n b√†i vi·∫øt th√†nh c√¥ng!', type: 'success' });
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i tr·ª±c ti·∫øp trong m·∫£ng blogs
        setBlogs(prevBlogs => 
          prevBlogs.map(b => 
            b.id === blog.id ? {...b, status: 'published'} : b
          )
        );
      } else {
        console.log('‚ùå Ph√™ duy·ªát v√† xu·∫•t b·∫£n b√†i vi·∫øt th·∫•t b·∫°i:', response);
        setNotification({ message: 'Ph√™ duy·ªát v√† xu·∫•t b·∫£n b√†i vi·∫øt th·∫•t b·∫°i!', type: 'error' });
      }
      
      // Refresh blog list
      fetchBlogs();
      
      // Auto-hide notification after 5 seconds
      setTimeout(() => {
        setNotification(null);
      }, 5000);
    } catch (error) {
      console.error('‚ùå L·ªói khi ph√™ duy·ªát b√†i vi·∫øt:', error);
      setNotification({ message: 'C√≥ l·ªói x·∫£y ra khi ph√™ duy·ªát b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.', type: 'error' });
    }
  };

  // Hi·ªÉn th·ªã modal x√°c nh·∫≠n tr∆∞·ªõc khi v√¥ hi·ªáu h√≥a
  const handleRejectClick = (blog: BlogDisplay) => {
    setPendingAction({
      type: 'reject',
      blog: blog
    });
    setIsConfirmModalOpen(true);
  };
  
  // T·ª´ ch·ªëi/v√¥ hi·ªáu h√≥a blog
  const handleRejectBlog = async (blog: BlogDisplay) => {
    try {
      console.log('üîÑ ƒêang t·ª´ ch·ªëi/v√¥ hi·ªáu h√≥a b√†i vi·∫øt, ID:', blog.id);
      
      // S·ª≠ d·ª•ng updateBlog API thay v√¨ DeactivateBlog ƒë·ªÉ gi·ªØ nguy√™n c√°c th√¥ng tin kh√°c
      const response = await blogAPI.updateBlog({
        id: blog.id,
        title: blog.title,
        content: blog.content,
        author: blog.author,
        isPublished: false // ƒê·∫∑t isPublished th√†nh false thay v√¨ status
      });
      
      if (response && response.statusCode === 200) {
        console.log('‚úÖ T·ª´ ch·ªëi/v√¥ hi·ªáu h√≥a b√†i vi·∫øt th√†nh c√¥ng:', response);
        setNotification({ message: 'T·ª´ ch·ªëi/v√¥ hi·ªáu h√≥a b√†i vi·∫øt th√†nh c√¥ng!', type: 'success' });
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i tr·ª±c ti·∫øp trong m·∫£ng blogs
        setBlogs(prevBlogs => 
          prevBlogs.map(b => 
            b.id === blog.id ? {...b, status: 'draft'} : b
          )
        );
      } else {
        console.log('‚ùå T·ª´ ch·ªëi/v√¥ hi·ªáu h√≥a b√†i vi·∫øt th·∫•t b·∫°i:', response);
        setNotification({ message: 'T·ª´ ch·ªëi/v√¥ hi·ªáu h√≥a b√†i vi·∫øt th·∫•t b·∫°i!', type: 'error' });
      }
      
      // Refresh blog list
      fetchBlogs();
      
      // Auto-hide notification after 5 seconds
      setTimeout(() => {
        setNotification(null);
      }, 5000);
    } catch (error) {
      console.error('‚ùå L·ªói khi t·ª´ ch·ªëi/v√¥ hi·ªáu h√≥a b√†i vi·∫øt:', error);
      setNotification({ message: 'C√≥ l·ªói x·∫£y ra khi t·ª´ ch·ªëi/v√¥ hi·ªáu h√≥a b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.', type: 'error' });
    }
  };

  // X√≥a blog
  const handleDeleteBlog = async (id: string) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt n√†y kh√¥ng?')) {
      try {
        console.log('ƒêang x√≥a b√†i vi·∫øt v·ªõi ID:', id);
        // Use the generic delete method from api
        const response = await api.delete(`/api/blog/DeleteBlog?blogId=${id}`);
        
        if (response && response.statusCode === 200) {
          console.log('‚úÖ X√≥a b√†i vi·∫øt th√†nh c√¥ng:', response);
          setNotification({ message: 'X√≥a b√†i vi·∫øt th√†nh c√¥ng!', type: 'success' });
        } else {
          console.log('‚ùå X√≥a b√†i vi·∫øt th·∫•t b·∫°i:', response);
          setNotification({ message: 'X√≥a b√†i vi·∫øt th·∫•t b·∫°i!', type: 'error' });
        }
        
        // Refresh blog list
        fetchBlogs();
        
        // Auto-hide notification after 5 seconds
        setTimeout(() => {
          setNotification(null);
        }, 5000);
      } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a b√†i vi·∫øt:', error);
        setNotification({ message: 'C√≥ l·ªói x·∫£y ra khi x√≥a b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.', type: 'error' });
      }
    }
  };

  // Xem chi ti·∫øt blog
  const handleViewBlog = (blogId: string) => {
    // Chuy·ªÉn ƒë·∫øn trang chi ti·∫øt blog trong c√πng tab
    navigate(`/blog/${blogId}`, { state: { fromManager: true } });
  };

  // X·ª≠ l√Ω khi x√°c nh·∫≠n thao t√°c
  const handleConfirmAction = async () => {
    if (pendingAction) {
      // ƒê√≥ng modal tr∆∞·ªõc ƒë·ªÉ giao di·ªán ng∆∞·ªùi d√πng ph·∫£n h·ªìi nhanh ch√≥ng
      setIsConfirmModalOpen(false);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
      setNotification({ 
        message: pendingAction.type === 'approve' 
          ? 'ƒêang x·ª≠ l√Ω ph√™ duy·ªát...' 
          : 'ƒêang x·ª≠ l√Ω v√¥ hi·ªáu h√≥a...', 
        type: 'success' 
      });
      
      // Th·ª±c hi·ªán thao t√°c t∆∞∆°ng ·ª©ng
      if (pendingAction.type === 'approve') {
        await handleApproveBlog(pendingAction.blog);
      } else if (pendingAction.type === 'reject') {
        await handleRejectBlog(pendingAction.blog);
      }
      
      // Reset tr·∫°ng th√°i
      setPendingAction(null);
    }
  };

  // X·ª≠ l√Ω khi h·ªßy thao t√°c
  const handleCancelAction = () => {
    setIsConfirmModalOpen(false);
    setPendingAction(null);
  };

  return (
    <div className="blog-approval-container">
      {notification && (
        <div className={`notification ${notification.type}`}>
          {notification.type === 'success' ? '‚úÖ ' : '‚ùå '}
          {notification.message}
        </div>
      )}
      
      <div className="page-header">
        <h1 className="page-title">Qu·∫£n L√Ω Ph√™ Duy·ªát B√†i Vi·∫øt</h1>
        <p className="page-subtitle">Ph√™ duy·ªát, t·ª´ ch·ªëi ho·∫∑c v√¥ hi·ªáu h√≥a b√†i vi·∫øt tr√™n h·ªá th·ªëng</p>
      </div>
      
      <div className="filters">
        <div className="search-container">
          <input 
            type="text" 
            placeholder="T√¨m ki·∫øm theo ti√™u ƒë·ªÅ, t√°c gi·∫£..." 
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="search-input"
          />
          <svg className="search-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="20" height="20">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        
        <div className="filter-container">
          <select 
            value={statusFilter} 
            onChange={(e) => setStatusFilter(e.target.value)}
            className="status-filter"
          >
            <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
            <option value="published">ƒê√£ xu·∫•t b·∫£n</option>
            <option value="draft">Ch∆∞a xu·∫•t b·∫£n</option>
          </select>
        </div>
      </div>

      <div className="blogs-table-container">
        {isLoading ? (
          <div className="loading">ƒêang t·∫£i...</div>
        ) : (
          <table className="blogs-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>Ti√™u ƒë·ªÅ</th>
                <th>T√°c gi·∫£</th>
                <th>Ng√†y xu·∫•t b·∫£n</th>
                <th>Tr·∫°ng th√°i</th>
                <th>Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {filteredBlogs.length > 0 ? (
                filteredBlogs.map((blog) => (
                  <tr key={blog.id}>
                    <td>{blog.id}</td>
                    <td className="blog-title-cell">{blog.title}</td>
                    <td>{blog.author}</td>
                    <td>{blog.publishedDate}</td>
                    <td>
                      <span className={`status-badge ${blog.status}`}>
                        {blog.status === 'published' ? 'ƒê√£ xu·∫•t b·∫£n' : 'Ch∆∞a xu·∫•t b·∫£n'}
                      </span>
                    </td>
                    <td>
                      <div className="action-buttons">
                        <button 
                          className="view-details-button" 
                          title="Xem chi ti·∫øt"
                          onClick={() => handleViewBlog(blog.id)}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="20" height="20">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                          </svg>
                        </button>

                        {blog.status === 'draft' && (
                          <button 
                            className="approve-btn" 
                            title="Ph√™ duy·ªát v√† xu·∫•t b·∫£n"
                            onClick={() => handleApproveClick(blog)}
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="20" height="20">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M5 13l4 4L19 7" />
                            </svg>
                          </button>
                        )}

                        {blog.status === 'published' && (
                          <button 
                            className="reject-btn" 
                            title="V√¥ hi·ªáu h√≥a b√†i vi·∫øt"
                            onClick={() => handleRejectClick(blog)}
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="20" height="20">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636" />
                            </svg>
                          </button>
                        )}
                        
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={6} className="no-data">Kh√¥ng c√≥ b√†i vi·∫øt n√†o</td>
                </tr>
              )}
            </tbody>
          </table>
        )}
      </div>

      {/* Modal x√°c nh·∫≠n ph√™ duy·ªát ho·∫∑c v√¥ hi·ªáu h√≥a */}
      {isConfirmModalOpen && pendingAction && (
        <div className="modal-overlay">
          <div className="confirm-modal">
            <div className="modal-header">
              <h3>
                {pendingAction.type === 'approve' 
                  ? 'X√°c nh·∫≠n ph√™ duy·ªát b√†i vi·∫øt' 
                  : 'X√°c nh·∫≠n v√¥ hi·ªáu h√≥a b√†i vi·∫øt'}
              </h3>
            </div>
            <div className="modal-body">
              <p>
                {pendingAction.type === 'approve'
                  ? `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ph√™ duy·ªát v√† xu·∫•t b·∫£n b√†i vi·∫øt "${pendingAction.blog.title}" kh√¥ng?`
                  : `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën v√¥ hi·ªáu h√≥a b√†i vi·∫øt "${pendingAction.blog.title}" kh√¥ng?`}
              </p>
            </div>
            <div className="modal-footer">
              <button className="cancel-btn" onClick={handleCancelAction}>H·ªßy</button>
              <button 
                className={pendingAction.type === 'approve' ? 'confirm-approve-btn' : 'confirm-reject-btn'} 
                onClick={handleConfirmAction}
              >
                {pendingAction.type === 'approve' ? 'Ph√™ duy·ªát' : 'V√¥ hi·ªáu h√≥a'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default BlogApproval;
